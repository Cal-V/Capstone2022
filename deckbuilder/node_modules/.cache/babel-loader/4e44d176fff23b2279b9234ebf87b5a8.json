{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rshipman\\\\Documents\\\\GitHub\\\\Capstone2022\\\\deckbuilder\\\\src\\\\Components\\\\DetailedCard\\\\CardDetails\\\\DetailBlock\\\\OracleText\\\\OracleText.js\";\nimport React from 'react';\nimport Symbol from '../Symbol/Symbol';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction OracleText(_ref) {\n  let {\n    card_text\n  } = _ref;\n  const symbolRegex = /\\{[A-Z/0-9∞½]+\\}/g;\n  const textRegex = /[A-Z/0-9∞½]+(?=})/g; //split text into each line\n\n  const oracleTextLines = card_text.split(\"\\n\"); //splitting each line of each face on the symbols [line][words]\n\n  const oracleTextWords = oracleTextLines.map(line => line.split(symbolRegex)); //getting each of the symbols [line][symbol]\n\n  const oracleTextSymbols = oracleTextLines.map(line => line.match(textRegex));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: card_text.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: oracleTextWords.map((line, lineIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"oracle-text-holder\",\n        children: line.map((segment, segmentIndex) => {\n          var _oracleTextSymbols$li, _oracleTextSymbols$li2;\n\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: segment\n              },\n              className: \"inline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 25\n            }, this), ((_oracleTextSymbols$li = oracleTextSymbols[lineIndex]) === null || _oracleTextSymbols$li === void 0 ? void 0 : _oracleTextSymbols$li[segmentIndex]) != null ? /*#__PURE__*/_jsxDEV(Symbol, {\n              shadow: false,\n              symbol: (_oracleTextSymbols$li2 = oracleTextSymbols[lineIndex]) === null || _oracleTextSymbols$li2 === void 0 ? void 0 : _oracleTextSymbols$li2[segmentIndex]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 151\n            }, this) : \"\"]\n          }, segmentIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }, this);\n        })\n      }, lineIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this))\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n}\n\n_c = OracleText;\nexport default OracleText;\n\nvar _c;\n\n$RefreshReg$(_c, \"OracleText\");","map":{"version":3,"names":["React","Symbol","OracleText","card_text","symbolRegex","textRegex","oracleTextLines","split","oracleTextWords","map","line","oracleTextSymbols","match","length","lineIndex","segment","segmentIndex","__html"],"sources":["C:/Users/rshipman/Documents/GitHub/Capstone2022/deckbuilder/src/Components/DetailedCard/CardDetails/DetailBlock/OracleText/OracleText.js"],"sourcesContent":["import React from 'react'\r\nimport Symbol from '../Symbol/Symbol'\r\n\r\nfunction OracleText({card_text}) {\r\n\r\n    const symbolRegex = /\\{[A-Z/0-9∞½]+\\}/g\r\n    const textRegex = /[A-Z/0-9∞½]+(?=})/g\r\n    \r\n    //split text into each line\r\n    const oracleTextLines = card_text.split(\"\\n\")\r\n\r\n    //splitting each line of each face on the symbols [line][words]\r\n    const oracleTextWords = oracleTextLines.map(line => (\r\n        line.split(symbolRegex)\r\n    ))\r\n\r\n    //getting each of the symbols [line][symbol]\r\n    const oracleTextSymbols = oracleTextLines.map(line => (\r\n        line.match(textRegex)\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            {card_text.length > 0 ?\r\n                <>{\r\n                oracleTextWords.map((line,lineIndex) => (\r\n                    <div key={lineIndex} className=\"oracle-text-holder\">\r\n                    {line.map((segment,segmentIndex) => (\r\n                        <p key={segmentIndex} className=\"inline\">\r\n                        <div dangerouslySetInnerHTML={{__html: segment}} className=\"inline\"/>{(oracleTextSymbols[lineIndex]?.[segmentIndex] != null ? <Symbol shadow={false} symbol={oracleTextSymbols[lineIndex]?.[segmentIndex]} /> : \"\" )}\r\n                        </p>\r\n                    ))}\r\n                    </div>\r\n                ))\r\n            }</>\r\n            :\r\n            <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OracleText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;;;AAEA,SAASC,UAAT,OAAiC;EAAA,IAAb;IAACC;EAAD,CAAa;EAE7B,MAAMC,WAAW,GAAG,mBAApB;EACA,MAAMC,SAAS,GAAG,oBAAlB,CAH6B,CAK7B;;EACA,MAAMC,eAAe,GAAGH,SAAS,CAACI,KAAV,CAAgB,IAAhB,CAAxB,CAN6B,CAQ7B;;EACA,MAAMC,eAAe,GAAGF,eAAe,CAACG,GAAhB,CAAoBC,IAAI,IAC5CA,IAAI,CAACH,KAAL,CAAWH,WAAX,CADoB,CAAxB,CAT6B,CAa7B;;EACA,MAAMO,iBAAiB,GAAGL,eAAe,CAACG,GAAhB,CAAoBC,IAAI,IAC9CA,IAAI,CAACE,KAAL,CAAWP,SAAX,CADsB,CAA1B;EAIA,oBACI;IAAA,UACKF,SAAS,CAACU,MAAV,GAAmB,CAAnB,gBACG;MAAA,UACAL,eAAe,CAACC,GAAhB,CAAoB,CAACC,IAAD,EAAMI,SAAN,kBAChB;QAAqB,SAAS,EAAC,oBAA/B;QAAA,UACCJ,IAAI,CAACD,GAAL,CAAS,CAACM,OAAD,EAASC,YAAT;UAAA;;UAAA,oBACN;YAAsB,SAAS,EAAC,QAAhC;YAAA,wBACA;cAAK,uBAAuB,EAAE;gBAACC,MAAM,EAAEF;cAAT,CAA9B;cAAiD,SAAS,EAAC;YAA3D;cAAA;cAAA;cAAA;YAAA,QADA,EACuE,0BAAAJ,iBAAiB,CAACG,SAAD,CAAjB,gFAA+BE,YAA/B,MAAgD,IAAhD,gBAAuD,QAAC,MAAD;cAAQ,MAAM,EAAE,KAAhB;cAAuB,MAAM,4BAAEL,iBAAiB,CAACG,SAAD,CAAnB,2DAAE,uBAA+BE,YAA/B;YAA/B;cAAA;cAAA;cAAA;YAAA,QAAvD,GAAyI,EADhN;UAAA,GAAQA,YAAR;YAAA;YAAA;YAAA;UAAA,QADM;QAAA,CAAT;MADD,GAAUF,SAAV;QAAA;QAAA;QAAA;MAAA,QADJ;IADA,iBADH,gBAaD;EAdJ,iBADJ;AAmBH;;KArCQZ,U;AAuCT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}